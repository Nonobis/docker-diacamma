name: Nightly build if syndic repo changed

on:
  schedule:
    - cron: '50 23 * * *'  # Runs every day at 23:50
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: "Force rebuild even if no changes"
        required: false
        default: "false"

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      previous_commit: ${{ steps.previous.outputs.previous_commit }}
    steps:
      - name: Checkout build-cache branch
        uses: actions/checkout@v4
        with:
          ref: build-cache
          path: cache-branch
          fetch-depth: 1
        continue-on-error: true

      - name: Get previous commit from build-cache
        id: previous
        run: |
          if [ -f cache-branch/.commit_cache ]; then
            echo "previous_commit=$(cat cache-branch/.commit_cache)" >> $GITHUB_OUTPUT
          else
            echo "previous_commit=none" >> $GITHUB_OUTPUT
          fi

  detect_changes:
    runs-on: ubuntu-latest
    needs: prepare
    outputs:
      run_build: ${{ steps.check.outputs.run_build }}
      latest_commit: ${{ steps.meta.outputs.latest_commit }}
      latest_commit_date: ${{ steps.meta.outputs.latest_commit_date }}
      previous_commit: ${{ needs.prepare.outputs.previous_commit }}
    steps:
      - name: Clone syndic repository
        run: |
          git clone --depth=1 https://github.com/Diacamma2/syndic.git syndic-temp
          cd syndic-temp
          COMMIT_HASH=$(git log -1 --pretty=format:'%H')
          COMMIT_DATE=$(git log -1 --date=format:'%Y%m%d-%H%M' --pretty=format:'%cd')
          cd ..
          rm -rf syndic-temp
          echo "$COMMIT_HASH" > latest_commit.txt
          echo "$COMMIT_DATE" > latest_commit_date.txt

      - name: Export commit info
        id: meta
        run: |
          echo "latest_commit=$(cat latest_commit.txt)" >> $GITHUB_OUTPUT
          echo "latest_commit_date=$(cat latest_commit_date.txt)" >> $GITHUB_OUTPUT

      - name: Check for changes
        id: check
        run: |
          latest_commit=$(cat latest_commit.txt)
          echo "Latest commit: $latest_commit"
          echo "Previous commit: ${{ needs.prepare.outputs.previous_commit }}"
          echo "Force rebuild: ${{ github.event.inputs.force_rebuild }}"

          if [ "${{ github.event.inputs.force_rebuild }}" = "true" ]; then
            echo "run_build=true" >> $GITHUB_OUTPUT
            echo "Force rebuild triggered."
          elif [ "${{ needs.prepare.outputs.previous_commit }}" = "$latest_commit" ]; then
            echo "No update detected. Skipping build."
            echo "run_build=false" >> $GITHUB_OUTPUT
          else
            echo "New commit detected."
            echo "run_build=true" >> $GITHUB_OUTPUT
          fi

  build_and_publish:
    runs-on: ubuntu-latest
    needs: detect_changes
    if: needs.detect_changes.outputs.run_build == 'true'
    outputs:
      image_name: ${{ steps.tags.outputs.image_name }}
      date_tag: ${{ steps.tags.outputs.date_tag }}
    steps:
      - name: Checkout master branch
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0

      - name: Set image tags
        id: tags
        run: |
          COMMIT_DATE="${{ needs.detect_changes.outputs.latest_commit_date }}"
          if [ -z "$COMMIT_DATE" ]; then
            echo "Empty commit date, invalid tag"
            exit 1
          fi

          IMAGE_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_NAME="ghcr.io/$IMAGE_OWNER/diacama"

          echo "date_tag=$COMMIT_DATE" >> $GITHUB_OUTPUT
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          IMAGE_NAME=${{ steps.tags.outputs.image_name }}
          TAG=${{ steps.tags.outputs.date_tag }}
          docker build -f build/diacama-syndic/Dockerfile -t $IMAGE_NAME:latest -t $IMAGE_NAME:$TAG build/diacama-syndic/

      - name: Check if image exists locally
        run: |
          IMAGE_NAME=${{ steps.tags.outputs.image_name }}
          TAG=${{ steps.tags.outputs.date_tag }}
          docker image inspect $IMAGE_NAME:latest >/dev/null 2>&1 || (echo "Missing image: $IMAGE_NAME:latest" && exit 1)
          docker image inspect $IMAGE_NAME:$TAG >/dev/null 2>&1 || (echo "Missing image: $IMAGE_NAME:$TAG" && exit 1)

      - name: Push Docker image
        run: |
          IMAGE_NAME=${{ steps.tags.outputs.image_name }}
          TAG=${{ steps.tags.outputs.date_tag }}
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$TAG

  update_cache:
    runs-on: ubuntu-latest
    needs: [detect_changes]
    if: needs.detect_changes.outputs.run_build == 'true'
    steps:
      - name: Checkout build-cache branch
        uses: actions/checkout@v4
        with:
          ref: build-cache
          fetch-depth: 0

      - name: Commit latest commit hash (or reset)
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          if [ "${{ github.event.inputs.force_rebuild }}" = "true" ]; then
            echo "none" > .commit_cache
            git add .commit_cache
            git commit -m "Reset commit cache via force rebuild" || echo "No changes to commit"
          else
            echo "${{ needs.detect_changes.outputs.latest_commit }}" > .commit_cache
            git add .commit_cache
            git commit -m "Update commit cache: ${{ needs.detect_changes.outputs.latest_commit }}" || echo "No changes to commit"
          fi

          git push origin build-cache

  update_version_file:
    runs-on: ubuntu-latest
    needs: [build_and_publish, detect_changes]
    if: needs.detect_changes.outputs.run_build == 'true'
    steps:
      - name: Checkout master
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0

      - name: Update version.txt
        run: |
          VERSION_FILE="version.txt"
          echo "# Version File" > $VERSION_FILE
          echo "Commit: ${{ needs.detect_changes.outputs.latest_commit }}" >> $VERSION_FILE
          echo "Commit Date: ${{ needs.detect_changes.outputs.latest_commit_date }}" >> $VERSION_FILE
          echo "Build Date (UTC): $(date -u '+%Y-%m-%d %H:%M UTC')" >> $VERSION_FILE
          echo "Docker Tags: ${{ needs.build_and_publish.outputs.date_tag }}, latest" >> $VERSION_FILE

          git add version.txt
          git commit -m "Update version.txt after build (${{ needs.build_and_publish.outputs.date_tag }})" || echo "No changes to commit"
          git push origin master

  publish_release:
    runs-on: ubuntu-latest
    needs: [build_and_publish, detect_changes]
    if: needs.detect_changes.outputs.run_build == 'true'
    steps:
      - name: Checkout master
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        id: changelog
        run: |
          TAG="${{ needs.build_and_publish.outputs.date_tag }}"
          PREVIOUS_COMMIT="${{ needs.detect_changes.outputs.previous_commit }}"
          LATEST_COMMIT="${{ needs.detect_changes.outputs.latest_commit }}"

          echo "## Commits since last build:" > body.md
          if [ "$PREVIOUS_COMMIT" != "none" ]; then
            git log --pretty=format:'- %h %s' $PREVIOUS_COMMIT..$LATEST_COMMIT >> body.md
          else
            git log --pretty=format:'- %h %s' -n 10 >> body.md
          fi

          echo -e "\n### Docker image\n\`ghcr.io/nonobis/diacama:$TAG\`" >> body.md

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build_and_publish.outputs.date_tag }}
          name: "Release - ${{ needs.build_and_publish.outputs.date_tag }}"
          body_path: body.md
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
          allow_updates: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

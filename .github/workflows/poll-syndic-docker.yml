name: Nightly build if syndic repo changed

on:
  schedule:
    - cron: '50 23 * * *'  # Tous les jours à 23h50
  workflow_dispatch:

jobs:
  poll-and-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout master branch
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0
          persist-credentials: true

      - name: Checkout build-cache branch
        uses: actions/checkout@v4
        with:
          ref: build-cache
          path: cache-branch
          fetch-depth: 1
        continue-on-error: true

      - name: Get previous commit from build-cache branch
        id: previous
        run: |
          if [ -f cache-branch/.commit_cache ]; then
            cat cache-branch/.commit_cache
            echo "previous_commit=$(cat cache-branch/.commit_cache)" >> $GITHUB_OUTPUT
          else
            echo "previous_commit=none" >> $GITHUB_OUTPUT
          fi

      - name: Get latest commit from syndic repo
        run: |
          git clone --depth=1 https://github.com/Diacamma2/syndic.git syndic-temp
          cd syndic-temp
          git log -1 --pretty=format:'%H' > ../latest_commit.txt
          # Maintenant récupère la date du commit
          git log -1 --date=format:'%Y%m%d-%H%M' --pretty=format:'%cd' > ../latest_commit_date.txt
          cd ..
          rm -rf syndic-temp

      - name: Check for changes
        id: check
        run: |
          latest_commit=$(cat latest_commit.txt)
          echo "Latest commit: $latest_commit"
          echo "Previous commit: ${{ steps.previous.outputs.previous_commit }}"
          if [ "${{ steps.previous.outputs.previous_commit }}" = "$latest_commit" ]; then
            echo "No update detected. Exiting."
            echo "run_build=false" >> $GITHUB_OUTPUT
          else
            echo "New commit detected."
            echo "run_build=true" >> $GITHUB_OUTPUT
          fi

      - name: Stop if no changes
        if: steps.check.outputs.run_build == 'false'
        run: exit 0

      - name: Set image tags based on commit date
        id: set-tags
        run: |
          COMMIT_DATE=$(cat latest_commit_date.txt)
          echo "date_tag=$COMMIT_DATE" >> $GITHUB_OUTPUT
          echo "image_name=ghcr.io/$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')/syndic" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout master branch to access Dockerfile
        run: |
          git checkout master
          git pull origin master

      - name: Build Docker image
        run: |
          IMAGE_NAME=${{ steps.set-tags.outputs.image_name }}
          docker build -f build/diacama-syndic/Dockerfile -t $IMAGE_NAME:latest -t $IMAGE_NAME:$TAG build/diacama-syndic/

      - name: Push Docker image to GHCR
        run: |
          IMAGE_NAME=${{ steps.set-tags.outputs.image_name }}
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:${{ steps.set-tags.outputs.date_tag }}

      - name: Commit new hash to build-cache branch
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # Prépare la branche build-cache
          git fetch origin build-cache || true
          git checkout build-cache || git checkout --orphan build-cache

          echo "$(cat latest_commit.txt)" > .commit_cache
          git add .commit_cache
          git commit -m "Update commit cache: $(cat latest_commit.txt)" || echo "No changes to commit"
          git push origin build-cache

      - name: Update version.txt in master branch
        run: |
          git checkout master
          git pull origin master

          VERSION_FILE="version.txt"
          echo "# Version File" > $VERSION_FILE
          echo "Commit: $(cat latest_commit.txt)" >> $VERSION_FILE
          echo "Commit Date: $(cat latest_commit_date.txt)" >> $VERSION_FILE
          echo "Build Date (UTC): $(date -u '+%Y-%m-%d %H:%M UTC')" >> $VERSION_FILE
          echo "Docker Tags: ${{ steps.set-tags.outputs.date_tag }}, latest" >> $VERSION_FILE

          git add version.txt
          git commit -m "Update version.txt after build (${{ steps.set-tags.outputs.date_tag }})" || echo "No changes to commit"
          git push origin master
